// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: detection/detection.proto

package detection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetectionProcClient is the client API for DetectionProc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectionProcClient interface {
	Process(ctx context.Context, in *DetectionData, opts ...grpc.CallOption) (*ProcessedReply, error)
}

type detectionProcClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectionProcClient(cc grpc.ClientConnInterface) DetectionProcClient {
	return &detectionProcClient{cc}
}

func (c *detectionProcClient) Process(ctx context.Context, in *DetectionData, opts ...grpc.CallOption) (*ProcessedReply, error) {
	out := new(ProcessedReply)
	err := c.cc.Invoke(ctx, "/detection.DetectionProc/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectionProcServer is the server API for DetectionProc service.
// All implementations must embed UnimplementedDetectionProcServer
// for forward compatibility
type DetectionProcServer interface {
	Process(context.Context, *DetectionData) (*ProcessedReply, error)
	mustEmbedUnimplementedDetectionProcServer()
}

// UnimplementedDetectionProcServer must be embedded to have forward compatible implementations.
type UnimplementedDetectionProcServer struct {
}

func (UnimplementedDetectionProcServer) Process(context.Context, *DetectionData) (*ProcessedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedDetectionProcServer) mustEmbedUnimplementedDetectionProcServer() {}

// UnsafeDetectionProcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectionProcServer will
// result in compilation errors.
type UnsafeDetectionProcServer interface {
	mustEmbedUnimplementedDetectionProcServer()
}

func RegisterDetectionProcServer(s grpc.ServiceRegistrar, srv DetectionProcServer) {
	s.RegisterService(&DetectionProc_ServiceDesc, srv)
}

func _DetectionProc_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectionProcServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/detection.DetectionProc/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectionProcServer).Process(ctx, req.(*DetectionData))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectionProc_ServiceDesc is the grpc.ServiceDesc for DetectionProc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectionProc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "detection.DetectionProc",
	HandlerType: (*DetectionProcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _DetectionProc_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "detection/detection.proto",
}
